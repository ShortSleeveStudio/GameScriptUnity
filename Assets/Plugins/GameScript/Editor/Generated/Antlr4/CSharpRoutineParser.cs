//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./CSharpRoutineParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CSharpRoutineParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TYPE_BOOLEAN=1, TYPE_CHAR=2, TYPE_FLOAT_DEFAULT=3, TYPE_FLOAT32=4, TYPE_FLOAT64=5, 
		TYPE_INT_DEFAULT=6, TYPE_INT8=7, TYPE_INT16=8, TYPE_INT32=9, TYPE_INT64=10, 
		TYPE_UINT_DEFAULT=11, TYPE_UINT8=12, TYPE_UINT16=13, TYPE_UINT32=14, TYPE_UINT64=15, 
		TYPE_STRING=16, NODE=17, SIGNAL=18, BREAK=19, CASE=20, DEFAULT=21, IF=22, 
		ELSE=23, SWITCH=24, INTEGER_LITERAL=25, FLOATING_POINT_LITERAL=26, BOOLEAN_LITERAL=27, 
		CHARACTER_LITERAL=28, STRING_LITERAL=29, NULL_LITERAL=30, LPAREN=31, RPAREN=32, 
		LBRACE=33, RBRACE=34, LBRACK=35, RBRACK=36, SEMI=37, COMMA=38, DOT=39, 
		COLON=40, COLONCOLON=41, ASSIGN=42, ADD_ASSIGN=43, SUB_ASSIGN=44, MUL_ASSIGN=45, 
		DIV_ASSIGN=46, AND_ASSIGN=47, OR_ASSIGN=48, XOR_ASSIGN=49, MOD_ASSIGN=50, 
		LSHIFT_ASSIGN=51, RSHIFT_ASSIGN=52, GT=53, LT=54, EQUAL=55, LE=56, GE=57, 
		NOTEQUAL=58, NOT=59, BIT_NOT=60, BIT_AND=61, BIT_OR=62, BIT_XOR=63, AND=64, 
		OR=65, INC=66, DEC=67, ADD=68, SUB=69, MUL=70, DIV=71, MOD=72, TERNARY=73, 
		IDENTIFIER=74, WHITESPACE=75, COMMENT_BLOCK=76, COMMENT_LINE=77;
	public const int
		RULE_routine = 0, RULE_scheduled_block = 1, RULE_scheduled_block_open = 2, 
		RULE_scheduled_block_close = 3, RULE_block = 4, RULE_statement = 5, RULE_compound_statement = 6, 
		RULE_statement_list = 7, RULE_expression_statement = 8, RULE_if_statement = 9, 
		RULE_switch_statement = 10, RULE_switch_block = 11, RULE_switch_label = 12, 
		RULE_declaration_statement = 13, RULE_declarator_init = 14, RULE_declarator = 15, 
		RULE_break_statement = 16, RULE_expression_list = 17, RULE_expression = 18, 
		RULE_assignment_operator = 19, RULE_type = 20, RULE_primitive_type = 21, 
		RULE_name = 22, RULE_flag_list = 23, RULE_literal = 24;
	public static readonly string[] ruleNames = {
		"routine", "scheduled_block", "scheduled_block_open", "scheduled_block_close", 
		"block", "statement", "compound_statement", "statement_list", "expression_statement", 
		"if_statement", "switch_statement", "switch_block", "switch_label", "declaration_statement", 
		"declarator_init", "declarator", "break_statement", "expression_list", 
		"expression", "assignment_operator", "type", "primitive_type", "name", 
		"flag_list", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'char'", "'float'", "'float32'", "'float64'", "'int'", 
		"'int8'", "'int16'", "'int32'", "'int64'", "'uint'", "'uint8'", "'uint16'", 
		"'uint32'", "'uint64'", "'string'", "'@node'", "'@sig'", "'break'", "'case'", 
		"'default'", "'if'", "'else'", "'switch'", null, null, null, null, null, 
		"'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
		"':'", "'::'", "'='", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", 
		"'^='", "'%='", "'<<='", "'>>='", "'>'", "'<'", "'=='", "'<='", "'>='", 
		"'!='", "'!'", "'~'", "'&'", "'|'", "'^'", "'&&'", "'||'", "'++'", "'--'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TYPE_BOOLEAN", "TYPE_CHAR", "TYPE_FLOAT_DEFAULT", "TYPE_FLOAT32", 
		"TYPE_FLOAT64", "TYPE_INT_DEFAULT", "TYPE_INT8", "TYPE_INT16", "TYPE_INT32", 
		"TYPE_INT64", "TYPE_UINT_DEFAULT", "TYPE_UINT8", "TYPE_UINT16", "TYPE_UINT32", 
		"TYPE_UINT64", "TYPE_STRING", "NODE", "SIGNAL", "BREAK", "CASE", "DEFAULT", 
		"IF", "ELSE", "SWITCH", "INTEGER_LITERAL", "FLOATING_POINT_LITERAL", "BOOLEAN_LITERAL", 
		"CHARACTER_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "COLON", 
		"COLONCOLON", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "GT", "LT", "EQUAL", "LE", "GE", "NOTEQUAL", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "AND", "OR", "INC", "DEC", "ADD", "SUB", 
		"MUL", "DIV", "MOD", "TERNARY", "IDENTIFIER", "WHITESPACE", "COMMENT_BLOCK", 
		"COMMENT_LINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpRoutineParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CSharpRoutineParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpRoutineParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpRoutineParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RoutineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CSharpRoutineParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_blockContext[] scheduled_block() {
			return GetRuleContexts<Scheduled_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_blockContext scheduled_block(int i) {
			return GetRuleContext<Scheduled_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitRoutine(this);
		}
	}

	[RuleVersion(0)]
	public RoutineContext routine() {
		RoutineContext _localctx = new RoutineContext(Context, State);
		EnterRule(_localctx, 0, RULE_routine);
		int _la;
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LT) {
					{
					{
					State = 50;
					scheduled_block();
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 56;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				block();
				State = 58;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_block_openContext scheduled_block_open() {
			return GetRuleContext<Scheduled_block_openContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Scheduled_block_closeContext scheduled_block_close() {
			return GetRuleContext<Scheduled_block_closeContext>(0);
		}
		public Scheduled_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterScheduled_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitScheduled_block(this);
		}
	}

	[RuleVersion(0)]
	public Scheduled_blockContext scheduled_block() {
		Scheduled_blockContext _localctx = new Scheduled_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_scheduled_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			scheduled_block_open();
			State = 63;
			block();
			State = 64;
			scheduled_block_close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_block_openContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpRoutineParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CSharpRoutineParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Flag_listContext flag_list() {
			return GetRuleContext<Flag_listContext>(0);
		}
		public Scheduled_block_openContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterScheduled_block_open(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitScheduled_block_open(this);
		}
	}

	[RuleVersion(0)]
	public Scheduled_block_openContext scheduled_block_open() {
		Scheduled_block_openContext _localctx = new Scheduled_block_openContext(Context, State);
		EnterRule(_localctx, 4, RULE_scheduled_block_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(LT);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 67;
				flag_list();
				}
			}

			State = 70;
			Match(SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scheduled_block_closeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CSharpRoutineParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpRoutineParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Flag_listContext flag_list() {
			return GetRuleContext<Flag_listContext>(0);
		}
		public Scheduled_block_closeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduled_block_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterScheduled_block_close(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitScheduled_block_close(this);
		}
	}

	[RuleVersion(0)]
	public Scheduled_block_closeContext scheduled_block_close() {
		Scheduled_block_closeContext _localctx = new Scheduled_block_closeContext(Context, State);
		EnterRule(_localctx, 6, RULE_scheduled_block_close);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(SUB);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 73;
				flag_list();
				}
			}

			State = 76;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 78;
					statement();
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				if_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				switch_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				compound_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				expression_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 88;
				declaration_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 89;
				break_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CSharpRoutineParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CSharpRoutineParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_compound_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(LBRACE);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1729382269783638014L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 271L) != 0)) {
				{
				State = 93;
				statement_list();
				}
			}

			State = 96;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 98;
				statement();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1729382269783638014L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 271L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSharpRoutineParser.SEMI, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			expression(0);
			State = 104;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(CSharpRoutineParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSharpRoutineParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSharpRoutineParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(CSharpRoutineParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(IF);
			State = 107;
			Match(LPAREN);
			State = 108;
			expression(0);
			State = 109;
			Match(RPAREN);
			State = 110;
			statement();
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 111;
				Match(ELSE);
				State = 112;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(CSharpRoutineParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSharpRoutineParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSharpRoutineParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_blockContext switch_block() {
			return GetRuleContext<Switch_blockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(SWITCH);
			State = 116;
			Match(LPAREN);
			State = 117;
			expression(0);
			State = 118;
			Match(RPAREN);
			State = 119;
			switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(CSharpRoutineParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(CSharpRoutineParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterSwitch_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitSwitch_block(this);
		}
	}

	[RuleVersion(0)]
	public Switch_blockContext switch_block() {
		Switch_blockContext _localctx = new Switch_blockContext(Context, State);
		EnterRule(_localctx, 22, RULE_switch_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(LBRACE);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 122;
				switch_label();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(CSharpRoutineParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpRoutineParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(CSharpRoutineParser.DEFAULT, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch_label);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(CASE);
				State = 131;
				expression(0);
				State = 132;
				Match(COLON);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1729382269783638014L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 271L) != 0)) {
					{
					{
					State = 133;
					statement();
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(DEFAULT);
				State = 140;
				Match(COLON);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1729382269783638014L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 271L) != 0)) {
					{
					{
					State = 141;
					statement();
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declarator_initContext declarator_init() {
			return GetRuleContext<Declarator_initContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSharpRoutineParser.SEMI, 0); }
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_declaration_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			type(0);
			State = 150;
			declarator_init();
			State = 151;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declarator_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CSharpRoutineParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declarator_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator_init; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterDeclarator_init(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitDeclarator_init(this);
		}
	}

	[RuleVersion(0)]
	public Declarator_initContext declarator_init() {
		Declarator_initContext _localctx = new Declarator_initContext(Context, State);
		EnterRule(_localctx, 28, RULE_declarator_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			declarator();
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 154;
				Match(ASSIGN);
				State = 155;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CSharpRoutineParser.IDENTIFIER, 0); }
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 30, RULE_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(CSharpRoutineParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(CSharpRoutineParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(BREAK);
			State = 161;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpRoutineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpRoutineParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			expression(0);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 164;
				Match(COMMA);
				State = 165;
				expression(0);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression_bitwise_orContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(CSharpRoutineParser.BIT_OR, 0); }
		public Expression_bitwise_orContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_bitwise_or(this);
		}
	}
	public partial class Expression_bitwise_andContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(CSharpRoutineParser.BIT_AND, 0); }
		public Expression_bitwise_andContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_bitwise_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_bitwise_and(this);
		}
	}
	public partial class Expression_relational_gtContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpRoutineParser.GT, 0); }
		public Expression_relational_gtContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_relational_gt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_relational_gt(this);
		}
	}
	public partial class Expression_postfix_invokeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSharpRoutineParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSharpRoutineParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Expression_postfix_invokeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_postfix_invoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_postfix_invoke(this);
		}
	}
	public partial class Expression_bitwise_xorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(CSharpRoutineParser.BIT_XOR, 0); }
		public Expression_bitwise_xorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_bitwise_xor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_bitwise_xor(this);
		}
	}
	public partial class Expression_postfix_inc_decContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(CSharpRoutineParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(CSharpRoutineParser.DEC, 0); }
		public Expression_postfix_inc_decContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_postfix_inc_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_postfix_inc_dec(this);
		}
	}
	public partial class Expression_primary_parentheticalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSharpRoutineParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSharpRoutineParser.RPAREN, 0); }
		public Expression_primary_parentheticalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_primary_parenthetical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_primary_parenthetical(this);
		}
	}
	public partial class Expression_additive_addContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CSharpRoutineParser.ADD, 0); }
		public Expression_additive_addContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_additive_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_additive_add(this);
		}
	}
	public partial class Expression_shift_rightContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(CSharpRoutineParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(CSharpRoutineParser.GT, i);
		}
		public Expression_shift_rightContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_shift_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_shift_right(this);
		}
	}
	public partial class Expression_ternaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERNARY() { return GetToken(CSharpRoutineParser.TERNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(CSharpRoutineParser.COLON, 0); }
		public Expression_ternaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_ternary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_ternary(this);
		}
	}
	public partial class Expression_equality_not_eqContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(CSharpRoutineParser.NOTEQUAL, 0); }
		public Expression_equality_not_eqContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_equality_not_eq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_equality_not_eq(this);
		}
	}
	public partial class Expression_logical_orContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(CSharpRoutineParser.OR, 0); }
		public Expression_logical_orContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_logical_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_logical_or(this);
		}
	}
	public partial class Expression_primary_literalContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Expression_primary_literalContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_primary_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_primary_literal(this);
		}
	}
	public partial class Expression_relational_geContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(CSharpRoutineParser.GE, 0); }
		public Expression_relational_geContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_relational_ge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_relational_ge(this);
		}
	}
	public partial class Expression_shift_leftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(CSharpRoutineParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(CSharpRoutineParser.LT, i);
		}
		public Expression_shift_leftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_shift_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_shift_left(this);
		}
	}
	public partial class Expression_equality_eqContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(CSharpRoutineParser.EQUAL, 0); }
		public Expression_equality_eqContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_equality_eq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_equality_eq(this);
		}
	}
	public partial class Expression_primary_nameContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Expression_primary_nameContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_primary_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_primary_name(this);
		}
	}
	public partial class Expression_assignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Expression_assignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_assignment(this);
		}
	}
	public partial class Expression_relational_ltContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpRoutineParser.LT, 0); }
		public Expression_relational_ltContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_relational_lt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_relational_lt(this);
		}
	}
	public partial class Expression_unaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CSharpRoutineParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(CSharpRoutineParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(CSharpRoutineParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT() { return GetToken(CSharpRoutineParser.BIT_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(CSharpRoutineParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(CSharpRoutineParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(CSharpRoutineParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(CSharpRoutineParser.RPAREN, 0); }
		public Expression_unaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_unary(this);
		}
	}
	public partial class Expression_additive_subContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(CSharpRoutineParser.SUB, 0); }
		public Expression_additive_subContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_additive_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_additive_sub(this);
		}
	}
	public partial class Expression_multiplicative_divContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(CSharpRoutineParser.DIV, 0); }
		public Expression_multiplicative_divContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_multiplicative_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_multiplicative_div(this);
		}
	}
	public partial class Expression_postfix_array_accessContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(CSharpRoutineParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(CSharpRoutineParser.RBRACK, 0); }
		public Expression_postfix_array_accessContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_postfix_array_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_postfix_array_access(this);
		}
	}
	public partial class Expression_logical_andContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(CSharpRoutineParser.AND, 0); }
		public Expression_logical_andContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_logical_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_logical_and(this);
		}
	}
	public partial class Expression_multiplicative_mulContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(CSharpRoutineParser.MUL, 0); }
		public Expression_multiplicative_mulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_multiplicative_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_multiplicative_mul(this);
		}
	}
	public partial class Expression_multiplicative_modContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(CSharpRoutineParser.MOD, 0); }
		public Expression_multiplicative_modContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_multiplicative_mod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_multiplicative_mod(this);
		}
	}
	public partial class Expression_relational_leContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(CSharpRoutineParser.LE, 0); }
		public Expression_relational_leContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterExpression_relational_le(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitExpression_relational_le(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				_localctx = new Expression_primary_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 172;
				name();
				}
				break;
			case 2:
				{
				_localctx = new Expression_primary_literalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new Expression_primary_parentheticalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 174;
				Match(LPAREN);
				State = 175;
				expression(0);
				State = 176;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new Expression_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUB:
					{
					State = 178;
					Match(SUB);
					}
					break;
				case ADD:
					{
					State = 179;
					Match(ADD);
					}
					break;
				case NOT:
					{
					State = 180;
					Match(NOT);
					}
					break;
				case BIT_NOT:
					{
					State = 181;
					Match(BIT_NOT);
					}
					break;
				case DEC:
					{
					State = 182;
					Match(DEC);
					}
					break;
				case INC:
					{
					State = 183;
					Match(INC);
					}
					break;
				case LPAREN:
					{
					State = 184;
					Match(LPAREN);
					State = 185;
					type(0);
					State = 186;
					Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 190;
				expression(21);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 272;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new Expression_multiplicative_mulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 194;
						Match(MUL);
						State = 195;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new Expression_multiplicative_divContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 197;
						Match(DIV);
						State = 198;
						expression(20);
						}
						break;
					case 3:
						{
						_localctx = new Expression_multiplicative_modContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 200;
						Match(MOD);
						State = 201;
						expression(19);
						}
						break;
					case 4:
						{
						_localctx = new Expression_additive_addContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 203;
						Match(ADD);
						State = 204;
						expression(18);
						}
						break;
					case 5:
						{
						_localctx = new Expression_additive_subContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 205;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 206;
						Match(SUB);
						State = 207;
						expression(17);
						}
						break;
					case 6:
						{
						_localctx = new Expression_shift_leftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 209;
						Match(LT);
						State = 210;
						Match(LT);
						State = 211;
						expression(16);
						}
						break;
					case 7:
						{
						_localctx = new Expression_shift_rightContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 213;
						Match(GT);
						State = 214;
						Match(GT);
						State = 215;
						expression(15);
						}
						break;
					case 8:
						{
						_localctx = new Expression_relational_ltContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 217;
						Match(LT);
						State = 218;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new Expression_relational_gtContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 220;
						Match(GT);
						State = 221;
						expression(13);
						}
						break;
					case 10:
						{
						_localctx = new Expression_relational_leContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 223;
						Match(LE);
						State = 224;
						expression(12);
						}
						break;
					case 11:
						{
						_localctx = new Expression_relational_geContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 226;
						Match(GE);
						State = 227;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new Expression_equality_eqContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 228;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 229;
						Match(EQUAL);
						State = 230;
						expression(10);
						}
						break;
					case 13:
						{
						_localctx = new Expression_equality_not_eqContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 231;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 232;
						Match(NOTEQUAL);
						State = 233;
						expression(9);
						}
						break;
					case 14:
						{
						_localctx = new Expression_bitwise_andContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 235;
						Match(BIT_AND);
						State = 236;
						expression(8);
						}
						break;
					case 15:
						{
						_localctx = new Expression_bitwise_orContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 237;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 238;
						Match(BIT_OR);
						State = 239;
						expression(7);
						}
						break;
					case 16:
						{
						_localctx = new Expression_bitwise_xorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 240;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 241;
						Match(BIT_XOR);
						State = 242;
						expression(6);
						}
						break;
					case 17:
						{
						_localctx = new Expression_logical_andContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 243;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 244;
						Match(AND);
						State = 245;
						expression(5);
						}
						break;
					case 18:
						{
						_localctx = new Expression_logical_orContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 246;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 247;
						Match(OR);
						State = 248;
						expression(4);
						}
						break;
					case 19:
						{
						_localctx = new Expression_ternaryContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 249;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 250;
						Match(TERNARY);
						State = 251;
						expression(0);
						State = 252;
						Match(COLON);
						State = 253;
						expression(2);
						}
						break;
					case 20:
						{
						_localctx = new Expression_assignmentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 255;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 256;
						assignment_operator();
						State = 257;
						expression(2);
						}
						break;
					case 21:
						{
						_localctx = new Expression_postfix_inc_decContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 259;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 260;
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 22:
						{
						_localctx = new Expression_postfix_array_accessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 261;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 262;
						Match(LBRACK);
						State = 263;
						expression(0);
						State = 264;
						Match(RBRACK);
						}
						break;
					case 23:
						{
						_localctx = new Expression_postfix_invokeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 266;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 267;
						Match(LPAREN);
						State = 269;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & 152572631516741379L) != 0)) {
							{
							State = 268;
							expression_list();
							}
						}

						State = 271;
						Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(CSharpRoutineParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(CSharpRoutineParser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(CSharpRoutineParser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(CSharpRoutineParser.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(CSharpRoutineParser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(CSharpRoutineParser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(CSharpRoutineParser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(CSharpRoutineParser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(CSharpRoutineParser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(CSharpRoutineParser.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(CSharpRoutineParser.RSHIFT_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterAssignment_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitAssignment_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9002801208229888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primitive_typeContext primitive_type() {
			return GetRuleContext<Primitive_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(CSharpRoutineParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(CSharpRoutineParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpRoutineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpRoutineParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(CSharpRoutineParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(CSharpRoutineParser.RBRACK, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_BOOLEAN:
			case TYPE_CHAR:
			case TYPE_FLOAT_DEFAULT:
			case TYPE_FLOAT32:
			case TYPE_FLOAT64:
			case TYPE_INT_DEFAULT:
			case TYPE_INT8:
			case TYPE_INT16:
			case TYPE_INT32:
			case TYPE_INT64:
			case TYPE_UINT_DEFAULT:
			case TYPE_UINT8:
			case TYPE_UINT16:
			case TYPE_UINT32:
			case TYPE_UINT64:
			case TYPE_STRING:
				{
				State = 280;
				primitive_type();
				}
				break;
			case IDENTIFIER:
				{
				State = 281;
				name();
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 282;
					Match(LT);
					State = 283;
					type(0);
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 284;
						Match(COMMA);
						State = 285;
						type(0);
						}
						}
						State = 290;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 291;
					Match(GT);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 297;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 298;
					Match(LBRACK);
					State = 299;
					Match(RBRACK);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Primitive_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOLEAN() { return GetToken(CSharpRoutineParser.TYPE_BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CHAR() { return GetToken(CSharpRoutineParser.TYPE_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT_DEFAULT() { return GetToken(CSharpRoutineParser.TYPE_FLOAT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT32() { return GetToken(CSharpRoutineParser.TYPE_FLOAT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT64() { return GetToken(CSharpRoutineParser.TYPE_FLOAT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT_DEFAULT() { return GetToken(CSharpRoutineParser.TYPE_INT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT8() { return GetToken(CSharpRoutineParser.TYPE_INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT16() { return GetToken(CSharpRoutineParser.TYPE_INT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT32() { return GetToken(CSharpRoutineParser.TYPE_INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT64() { return GetToken(CSharpRoutineParser.TYPE_INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT_DEFAULT() { return GetToken(CSharpRoutineParser.TYPE_UINT_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT8() { return GetToken(CSharpRoutineParser.TYPE_UINT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT16() { return GetToken(CSharpRoutineParser.TYPE_UINT16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT32() { return GetToken(CSharpRoutineParser.TYPE_UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT64() { return GetToken(CSharpRoutineParser.TYPE_UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(CSharpRoutineParser.TYPE_STRING, 0); }
		public Primitive_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterPrimitive_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitPrimitive_type(this);
		}
	}

	[RuleVersion(0)]
	public Primitive_typeContext primitive_type() {
		Primitive_typeContext _localctx = new Primitive_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_primitive_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131070L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpRoutineParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpRoutineParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(CSharpRoutineParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(CSharpRoutineParser.DOT, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 44, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(IDENTIFIER);
			State = 312;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 308;
					Match(DOT);
					State = 309;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 314;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flag_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(CSharpRoutineParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CSharpRoutineParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(CSharpRoutineParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(CSharpRoutineParser.COMMA, i);
		}
		public Flag_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flag_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterFlag_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitFlag_list(this);
		}
	}

	[RuleVersion(0)]
	public Flag_listContext flag_list() {
		Flag_listContext _localctx = new Flag_listContext(Context, State);
		EnterRule(_localctx, 46, RULE_flag_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(IDENTIFIER);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 316;
				Match(COMMA);
				State = 317;
				Match(IDENTIFIER);
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharpRoutineParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT_LITERAL() { return GetToken(CSharpRoutineParser.FLOATING_POINT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(CSharpRoutineParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharpRoutineParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(CSharpRoutineParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(CSharpRoutineParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODE() { return GetToken(CSharpRoutineParser.NODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(CSharpRoutineParser.SIGNAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpRoutineParserListener typedListener = listener as ICSharpRoutineParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 48, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2114322432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 6);
		case 15: return Precpred(Context, 5);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		case 20: return Precpred(Context, 24);
		case 21: return Precpred(Context, 23);
		case 22: return Precpred(Context, 22);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,77,326,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,1,0,
		1,0,1,0,3,0,61,8,0,1,1,1,1,1,1,1,1,1,2,1,2,3,2,69,8,2,1,2,1,2,1,3,1,3,
		3,3,75,8,3,1,3,1,3,1,4,5,4,80,8,4,10,4,12,4,83,9,4,1,5,1,5,1,5,1,5,1,5,
		1,5,3,5,91,8,5,1,6,1,6,3,6,95,8,6,1,6,1,6,1,7,4,7,100,8,7,11,7,12,7,101,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,114,8,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,11,1,11,5,11,124,8,11,10,11,12,11,127,9,11,1,11,1,11,1,12,
		1,12,1,12,1,12,5,12,135,8,12,10,12,12,12,138,9,12,1,12,1,12,1,12,5,12,
		143,8,12,10,12,12,12,146,9,12,3,12,148,8,12,1,13,1,13,1,13,1,13,1,14,1,
		14,1,14,3,14,157,8,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,5,17,167,
		8,17,10,17,12,17,170,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,189,8,18,1,18,3,18,192,8,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,270,8,18,1,18,5,18,273,8,18,10,18,
		12,18,276,9,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,287,8,
		20,10,20,12,20,290,9,20,1,20,1,20,3,20,294,8,20,3,20,296,8,20,1,20,1,20,
		1,20,5,20,301,8,20,10,20,12,20,304,9,20,1,21,1,21,1,22,1,22,1,22,5,22,
		311,8,22,10,22,12,22,314,9,22,1,23,1,23,1,23,5,23,319,8,23,10,23,12,23,
		322,9,23,1,24,1,24,1,24,0,2,36,40,25,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,0,4,1,0,66,67,1,0,42,52,1,0,1,16,2,
		0,17,18,25,30,358,0,60,1,0,0,0,2,62,1,0,0,0,4,66,1,0,0,0,6,72,1,0,0,0,
		8,81,1,0,0,0,10,90,1,0,0,0,12,92,1,0,0,0,14,99,1,0,0,0,16,103,1,0,0,0,
		18,106,1,0,0,0,20,115,1,0,0,0,22,121,1,0,0,0,24,147,1,0,0,0,26,149,1,0,
		0,0,28,153,1,0,0,0,30,158,1,0,0,0,32,160,1,0,0,0,34,163,1,0,0,0,36,191,
		1,0,0,0,38,277,1,0,0,0,40,295,1,0,0,0,42,305,1,0,0,0,44,307,1,0,0,0,46,
		315,1,0,0,0,48,323,1,0,0,0,50,52,3,2,1,0,51,50,1,0,0,0,52,55,1,0,0,0,53,
		51,1,0,0,0,53,54,1,0,0,0,54,56,1,0,0,0,55,53,1,0,0,0,56,61,5,0,0,1,57,
		58,3,8,4,0,58,59,5,0,0,1,59,61,1,0,0,0,60,53,1,0,0,0,60,57,1,0,0,0,61,
		1,1,0,0,0,62,63,3,4,2,0,63,64,3,8,4,0,64,65,3,6,3,0,65,3,1,0,0,0,66,68,
		5,54,0,0,67,69,3,46,23,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,
		71,5,69,0,0,71,5,1,0,0,0,72,74,5,69,0,0,73,75,3,46,23,0,74,73,1,0,0,0,
		74,75,1,0,0,0,75,76,1,0,0,0,76,77,5,53,0,0,77,7,1,0,0,0,78,80,3,10,5,0,
		79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,9,1,0,0,0,83,
		81,1,0,0,0,84,91,3,18,9,0,85,91,3,20,10,0,86,91,3,12,6,0,87,91,3,16,8,
		0,88,91,3,26,13,0,89,91,3,32,16,0,90,84,1,0,0,0,90,85,1,0,0,0,90,86,1,
		0,0,0,90,87,1,0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,11,1,0,0,0,92,94,5,
		33,0,0,93,95,3,14,7,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,
		5,34,0,0,97,13,1,0,0,0,98,100,3,10,5,0,99,98,1,0,0,0,100,101,1,0,0,0,101,
		99,1,0,0,0,101,102,1,0,0,0,102,15,1,0,0,0,103,104,3,36,18,0,104,105,5,
		37,0,0,105,17,1,0,0,0,106,107,5,22,0,0,107,108,5,31,0,0,108,109,3,36,18,
		0,109,110,5,32,0,0,110,113,3,10,5,0,111,112,5,23,0,0,112,114,3,10,5,0,
		113,111,1,0,0,0,113,114,1,0,0,0,114,19,1,0,0,0,115,116,5,24,0,0,116,117,
		5,31,0,0,117,118,3,36,18,0,118,119,5,32,0,0,119,120,3,22,11,0,120,21,1,
		0,0,0,121,125,5,33,0,0,122,124,3,24,12,0,123,122,1,0,0,0,124,127,1,0,0,
		0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,
		129,5,34,0,0,129,23,1,0,0,0,130,131,5,20,0,0,131,132,3,36,18,0,132,136,
		5,40,0,0,133,135,3,10,5,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,
		0,0,136,137,1,0,0,0,137,148,1,0,0,0,138,136,1,0,0,0,139,140,5,21,0,0,140,
		144,5,40,0,0,141,143,3,10,5,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,
		1,0,0,0,144,145,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,147,130,1,0,0,
		0,147,139,1,0,0,0,148,25,1,0,0,0,149,150,3,40,20,0,150,151,3,28,14,0,151,
		152,5,37,0,0,152,27,1,0,0,0,153,156,3,30,15,0,154,155,5,42,0,0,155,157,
		3,36,18,0,156,154,1,0,0,0,156,157,1,0,0,0,157,29,1,0,0,0,158,159,5,74,
		0,0,159,31,1,0,0,0,160,161,5,19,0,0,161,162,5,37,0,0,162,33,1,0,0,0,163,
		168,3,36,18,0,164,165,5,38,0,0,165,167,3,36,18,0,166,164,1,0,0,0,167,170,
		1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,35,1,0,0,0,170,168,1,0,0,0,
		171,172,6,18,-1,0,172,192,3,44,22,0,173,192,3,48,24,0,174,175,5,31,0,0,
		175,176,3,36,18,0,176,177,5,32,0,0,177,192,1,0,0,0,178,189,5,69,0,0,179,
		189,5,68,0,0,180,189,5,59,0,0,181,189,5,60,0,0,182,189,5,67,0,0,183,189,
		5,66,0,0,184,185,5,31,0,0,185,186,3,40,20,0,186,187,5,32,0,0,187,189,1,
		0,0,0,188,178,1,0,0,0,188,179,1,0,0,0,188,180,1,0,0,0,188,181,1,0,0,0,
		188,182,1,0,0,0,188,183,1,0,0,0,188,184,1,0,0,0,189,190,1,0,0,0,190,192,
		3,36,18,21,191,171,1,0,0,0,191,173,1,0,0,0,191,174,1,0,0,0,191,188,1,0,
		0,0,192,274,1,0,0,0,193,194,10,20,0,0,194,195,5,70,0,0,195,273,3,36,18,
		21,196,197,10,19,0,0,197,198,5,71,0,0,198,273,3,36,18,20,199,200,10,18,
		0,0,200,201,5,72,0,0,201,273,3,36,18,19,202,203,10,17,0,0,203,204,5,68,
		0,0,204,273,3,36,18,18,205,206,10,16,0,0,206,207,5,69,0,0,207,273,3,36,
		18,17,208,209,10,15,0,0,209,210,5,54,0,0,210,211,5,54,0,0,211,273,3,36,
		18,16,212,213,10,14,0,0,213,214,5,53,0,0,214,215,5,53,0,0,215,273,3,36,
		18,15,216,217,10,13,0,0,217,218,5,54,0,0,218,273,3,36,18,14,219,220,10,
		12,0,0,220,221,5,53,0,0,221,273,3,36,18,13,222,223,10,11,0,0,223,224,5,
		56,0,0,224,273,3,36,18,12,225,226,10,10,0,0,226,227,5,57,0,0,227,273,3,
		36,18,11,228,229,10,9,0,0,229,230,5,55,0,0,230,273,3,36,18,10,231,232,
		10,8,0,0,232,233,5,58,0,0,233,273,3,36,18,9,234,235,10,7,0,0,235,236,5,
		61,0,0,236,273,3,36,18,8,237,238,10,6,0,0,238,239,5,62,0,0,239,273,3,36,
		18,7,240,241,10,5,0,0,241,242,5,63,0,0,242,273,3,36,18,6,243,244,10,4,
		0,0,244,245,5,64,0,0,245,273,3,36,18,5,246,247,10,3,0,0,247,248,5,65,0,
		0,248,273,3,36,18,4,249,250,10,2,0,0,250,251,5,73,0,0,251,252,3,36,18,
		0,252,253,5,40,0,0,253,254,3,36,18,2,254,273,1,0,0,0,255,256,10,1,0,0,
		256,257,3,38,19,0,257,258,3,36,18,2,258,273,1,0,0,0,259,260,10,24,0,0,
		260,273,7,0,0,0,261,262,10,23,0,0,262,263,5,35,0,0,263,264,3,36,18,0,264,
		265,5,36,0,0,265,273,1,0,0,0,266,267,10,22,0,0,267,269,5,31,0,0,268,270,
		3,34,17,0,269,268,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,273,5,32,
		0,0,272,193,1,0,0,0,272,196,1,0,0,0,272,199,1,0,0,0,272,202,1,0,0,0,272,
		205,1,0,0,0,272,208,1,0,0,0,272,212,1,0,0,0,272,216,1,0,0,0,272,219,1,
		0,0,0,272,222,1,0,0,0,272,225,1,0,0,0,272,228,1,0,0,0,272,231,1,0,0,0,
		272,234,1,0,0,0,272,237,1,0,0,0,272,240,1,0,0,0,272,243,1,0,0,0,272,246,
		1,0,0,0,272,249,1,0,0,0,272,255,1,0,0,0,272,259,1,0,0,0,272,261,1,0,0,
		0,272,266,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,
		37,1,0,0,0,276,274,1,0,0,0,277,278,7,1,0,0,278,39,1,0,0,0,279,280,6,20,
		-1,0,280,296,3,42,21,0,281,293,3,44,22,0,282,283,5,54,0,0,283,288,3,40,
		20,0,284,285,5,38,0,0,285,287,3,40,20,0,286,284,1,0,0,0,287,290,1,0,0,
		0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,
		292,5,53,0,0,292,294,1,0,0,0,293,282,1,0,0,0,293,294,1,0,0,0,294,296,1,
		0,0,0,295,279,1,0,0,0,295,281,1,0,0,0,296,302,1,0,0,0,297,298,10,2,0,0,
		298,299,5,35,0,0,299,301,5,36,0,0,300,297,1,0,0,0,301,304,1,0,0,0,302,
		300,1,0,0,0,302,303,1,0,0,0,303,41,1,0,0,0,304,302,1,0,0,0,305,306,7,2,
		0,0,306,43,1,0,0,0,307,312,5,74,0,0,308,309,5,39,0,0,309,311,5,74,0,0,
		310,308,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,45,
		1,0,0,0,314,312,1,0,0,0,315,320,5,74,0,0,316,317,5,38,0,0,317,319,5,74,
		0,0,318,316,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,
		47,1,0,0,0,322,320,1,0,0,0,323,324,7,3,0,0,324,49,1,0,0,0,26,53,60,68,
		74,81,90,94,101,113,125,136,144,147,156,168,188,191,269,272,274,288,293,
		295,302,312,320
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
